
#include "ros/ros.h"
#include "std_msgs/String.h"
#include "vizzy_tactile/TacVector.h"
#include "vizzy_tactile/Tactile.h"
#include "vizzy_tactile/TactSensorArray.h"
#include "vizzy_tactile/TactSensor.h"
#include <iostream>
#include <visualization_msgs/Marker.h>
#include <tf/tf.h>



ros::Publisher pub;
ros::Subscriber sub;
ros::Publisher marker_pub;

std::string hand;

int countMeasures;
float pos_x0[16], pos_y0[16], pos_z0[16]; // Initial magnet positions [mm]


void subscriberCallback(const vizzy_tactile::Tactile::ConstPtr& msg)
{




  vizzy_tactile::TactSensorArray outmsg;


  std::stringstream aux;

  aux << "tactile_shapes_" << hand;





  //For each sensor
  int i=0;
  //int x,y,z;                    // Received values
  float Bx,By,Bz;               // Magnetic Field [Oe]
  float pos_x, pos_y, pos_z;    // Magnet Position Relative to the Sensor [mm]

  float dx, dy, dz;             // Magnet displacements [mm]
  float Fx, Fy, Fz;             // Force [N]


  for(auto sensor: msg->sensorsArray)
  {

  visualization_msgs::Marker marker;
  marker.ns = aux.str();
  marker.header.stamp = ros::Time::now();

      marker.type = visualization_msgs::Marker::ARROW;

    std::stringstream ss;

    ss << hand << "_" << i+1 << "/tactile_" << hand << "_0_" << i+1;
    outmsg.sensorArray[i].frame_id = ss.str();


    //CODIGO PARA CALCULAR FORCA E CAMPO

    //Convert to Fields
    Bx = sensor.x*0.161*0.01;
    By = sensor.y*0.161*0.01;
    Bz = sensor.z*0.294*0.01;

    //Convert to Displacements
    pos_x=Bx*0.25;
    pos_y=By*0.25;
    pos_z=-Bz*0.02+4;

    if(countMeasures < 11)
    {
	pos_x0[i] += pos_x;
	pos_y0[i] += pos_y;
	pos_z0[i] += pos_z;
        i++;

     continue;
    }else if(countMeasures == 11)
    {
	pos_x0[i] /= 10;
        pos_y0[i] /= 10;
        pos_z0[i] /= 10;
	countMeasures++;
    }


    dx = pos_x - pos_x0[i];
    dy = pos_y - pos_y0[i];
    dz = pos_z - pos_z0[i];

    //Convert to Force
    Fx=dx*(3+0.7*dz);
    Fy=dy*(3+0.7*dz);
    Fz=(2.231*dz*dz+3.111*abs(dz))*(1-dy*dy*0.1)*(1-dx*dx*0.1);


    //SUBSTITUIR ZERO PELOS VALORES REAIS
    outmsg.sensorArray[i].force.x = Fx;
    outmsg.sensorArray[i].force.y = Fy;
    outmsg.sensorArray[i].force.z = Fz;
    
    double forceMagnitude = sqrt(Fx*Fx+Fy*Fy+Fz*Fz);


    outmsg.sensorArray[i].field.x = Bx;
    outmsg.sensorArray[i].field.y = By;
    outmsg.sensorArray[i].field.z = Bz;

    //Temporary: force marker visualization

    marker.id = i+1;
    marker.header.frame_id = ss.str();

    marker.action = visualization_msgs::Marker::ADD;

    geometry_msgs::Point p;
    p.x = 0;
    p.y = 0;
    p.z = 0;
    marker.points.push_back(p);
   
    p.x = Fx*0.1;
    p.y = Fy*0.1;
    p.z = Fz*0.1;  

    marker.points.push_back(p);
    

    marker.color.a = 1.0; // Don't forget to set the alpha!
    marker.color.r = 1.0;
    marker.color.g = 0.0;
    marker.color.b = 0.0;


    marker.scale.x = 0.005; //Grossura da seta
    marker.scale.y = 0.01; //Isto Ã© a grossura da seta...
    //marker.scale.z = 0;
    //Vector magnitude
    
    //marker.scale.z = sqrt(outmsg.sensorArray[i].force.x*outmsg.sensorArray[i].force.x+outmsg.sensorArray[i].force.y*outmsg.sensorArray[i].force.y+outmsg.sensorArray[i].force.z*outmsg.sensorArray[i].force.z);

    marker_pub.publish(marker);

    i++;

  }

  countMeasures++;

  if(countMeasures > 10)
  pub.publish(outmsg);


}





int main(int argc, char **argv)
{
  ros::init(argc, argv, "tactileComputationalNode");
  ros::NodeHandle nh;
  ros::NodeHandle nPriv("~");

  sub = nh.subscribe("/tactile", 1000, subscriberCallback);
  pub = nh.advertise<vizzy_tactile::TactSensorArray>("tactileForceField", 1000);
  marker_pub = nh.advertise<visualization_msgs::Marker>("tactileForceMarker", 1000);

  nPriv.param<std::string>("hand", hand, "right");

  countMeasures = 0;

  for(int i= 0; i<16;i++)
  {
    pos_x0[i] = 0;
    pos_y0[i] = 0;
    pos_z0[i] = 0;   
  }



  ros::spin();

  return 0;
}
